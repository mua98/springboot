server:
  port: 8088
  servlet:
    context-path: /api
spring:
  banner:
    location: banner.txt

  jackson:
    time-zone: Asia/Shanghai
    date-format: yyyy-MM-dd HH:mm:ss

  # 配置mysql数据库
  datasource:
    dynamic:
      primary: mysql #设置默认的数据源或者数据源组,默认值即为master
      strict: false #严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源
      datasource:
        mysql:
          driver-class-name: com.mysql.jdbc.Driver
          type: com.alibaba.druid.pool.DruidDataSource
          url: jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf8&useSSL=false
          username: root
          password: 123456
          druid:
            # 初始化时建立物理连接的个数
            initialSize: 5
            # 连接池的最小空闲数量
            minIdle: 5
            # 连接池最大连接数量
            maxActive: 20
            # 获取连接时最大等待时间，单位毫秒
            maxWait: 60000
            # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
            testWhileIdle: true
            # 既作为检测的间隔时间又作为testWhileIdel执行的依据
            timeBetweenEvictionRunsMillis: 60000
            # 销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接(配置连接在池中的最小生存时间)
            minEvictableIdleTimeMillis: 300000
            # 用来检测数据库连接是否有效的sql 必须是一个查询语句(oracle中为 select 1 from dual)
            validationQuery: select 1
            # 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
            testOnBorrow: false
            # 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
            testOnReturn: false
            # 是否缓存preparedStatement, 也就是PSCache,PSCache对支持游标的数据库性能提升巨大，比如说oracle,在mysql下建议关闭。
            poolPreparedStatements: true
            # 置监控统计拦截的filters，去掉后监控界面sql无法统计，stat: 监控统计、Slf4j:日志记录、waLL: 防御sqL注入
            filters: stat,wall,slf4j
            # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
            max-pool-prepared-statement-per-connection-size: -1
            # 合并多个DruidDataSource的监控数据
            use-global-data-source-stat: true
            # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
            connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
        oracle:
          driver-class-name: oracle.jdbc.driver.OracleDriver
          type: com.alibaba.druid.pool.DruidDataSource
          url: jdbc:oracle:thin:@127.0.0.1:1521:orcl
          username: xuwei
          password: 123456
          druid:
            # 初始化时建立物理连接的个数
            initialSize: 10
            # 连接池的最小空闲数量
            minIdle: 10
            # 连接池最大连接数量
            maxActive: 20
            # 获取连接时最大等待时间，单位毫秒
            maxWait: 60000
            # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
            testWhileIdle: true
            # 既作为检测的间隔时间又作为testWhileIdel执行的依据
            timeBetweenEvictionRunsMillis: 60000
            # 销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接(配置连接在池中的最小生存时间)
            minEvictableIdleTimeMillis: 300000
            # 用来检测数据库连接是否有效的sql 必须是一个查询语句(oracle中为 select 1 from dual)
            validationQuery: select 1 from dual
            # 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
            testOnBorrow: false
            # 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
            testOnReturn: false
            # 是否缓存preparedStatement, 也就是PSCache,PSCache对支持游标的数据库性能提升巨大，比如说oracle,在mysql下建议关闭。
            poolPreparedStatements: true
            # 置监控统计拦截的filters，去掉后监控界面sql无法统计，stat: 监控统计、Slf4j:日志记录、waLL: 防御sqL注入
            filters: stat,wall,slf4j
            # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
            max-pool-prepared-statement-per-connection-size: -1
            # 合并多个DruidDataSource的监控数据
            use-global-data-source-stat: true
            # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
            connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    #druid 数据源专有配置  官方文档：https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter
    #sql监控： http://localhost:8088/api/druid 账号：druid 密码：druid
    # 全局druid参数，单独数据源配置为空时取全局配置
    druid:
      # 初始化时建立物理连接的个数
      initialSize: 5
      # 连接池的最小空闲数量
      minIdle: 5
      # 连接池最大连接数量
      maxActive: 20
      # 获取连接时最大等待时间，单位毫秒
      maxWait: 60000
      # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      testWhileIdle: true
      # 既作为检测的间隔时间又作为testWhileIdel执行的依据
      timeBetweenEvictionRunsMillis: 60000
      # 销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接(配置连接在池中的最小生存时间)
      minEvictableIdleTimeMillis: 300000
      # 用来检测数据库连接是否有效的sql 必须是一个查询语句(oracle中为 select 1 from dual)
      validationQuery: select 1 from dual
      # 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      testOnBorrow: false
      # 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      testOnReturn: false
      # 是否缓存preparedStatement, 也就是PSCache,PSCache对支持游标的数据库性能提升巨大，比如说oracle,在mysql下建议关闭。
      poolPreparedStatements: true
      # 置监控统计拦截的filters，去掉后监控界面sql无法统计，stat: 监控统计、Slf4j:日志记录、waLL: 防御sqL注入
      filters: stat,wall,slf4j
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      max-pool-prepared-statement-per-connection-size: -1
      # 合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 配置监控
      web-stat-filter:
        # 是否启用StatFilter默认值true
        enabled: true
        # 添加过滤规则
        url-pattern: /*
        # 忽略过滤的格式
        exclusions: /druid/*,*.js,*.gif,*.jpg,*.png,*.css,*.ico
      # StatViewServlet配置 Druid内置提供了一个StatViewServlet用于展示Druid的统计信息
      stat-view-servlet:
        # 是否启用StatViewServlet默认值true
        enabled: true
        # 访问路径为/druid时，跳转到StatViewServlet
        url-pattern: /druid/*
        # 是否能够重置数据
        reset-enable: false
        # 需要账号密码才能访问控制台，默认为root
        login-username: druid
        login-password: druid
        # IP白名单
        allow: 127.0.0.1
        # IP黑名单（共同存在时，deny优先于allow）
        deny:

#配置MybatisPlus
mybatis-plus:
  mapper-locations: classpath*:/mapper/**/*.xml
  configuration:
#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    map-underscore-to-camel-case: true
  global-config:
    # 是否开启 mybatis-plus的 banner
    banner: true

logging:
  config: classpath:logback-spring.xml
  level:
    com.mua: debug
